version: '3.8'

# This Docker Compose file sets up the production environment for AcademiaVeritas.
# It includes services for the database, backend, frontend, and an optional Redis cache.

services:
  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: academia_db_prod
    restart: unless-stopped
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database_schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=academia_veritas
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admin", "-padmin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - academia_network

  # Python Flask Backend Service
  backend:
    container_name: academia_backend_prod
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=production
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=academia_veritas
      - DB_USER=admin
      - DB_PASSWORD=admin
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:5000/api/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - academia_network

  # React Frontend with Nginx Service
  frontend:
    container_name: academia_frontend_prod
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - academia_network

  # Redis Service for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: academia_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - academia_network

# Volumes for persistent data storage
volumes:
  mysql_data:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local

# Network configuration for inter-service communication
networks:
  academia_network:
    driver: bridge

